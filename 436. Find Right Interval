class Solution {
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        vector<pair<int,int>>sp;    //sp -> search space
        vector<int>ans;
        for(int i = 0 ; i<intervals.size() ; i++)
        {
            sp.push_back(make_pair(intervals[i][0],i));   // insert the elements in vector of pair
        }

        for(int i=0 ; i <intervals.size() ; i++)
        {                                                // for comparison
            bool flag=false;
            int s=0;
            int e = sp.size()-1;
            int mid = s+ (e-s) /2;
            int tempans=-1;

         while(s <= e)       // binary search
            {
            if( sp[mid].first == intervals[i][1])
                    {
                    ans.push_back ( sp[mid].second ) ;
                    flag = true;
                    break;                               
                }
            else if( sp[mid].first > intervals[i][1])
                {
                    e=mid-1;
                    tempans=sp[mid].second;
                    
                }
            else 
                s=mid+1;
            

                mid=s+(e-s)/2;

             }
             if(flag==false)
             {
                 ans.push_back(tempans);
             }
        }
        return ans;
    }
};
