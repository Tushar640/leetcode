class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int m = nums1.length;
       int n = nums2.length;
       if(m > n)
        return  findMedianSortedArrays(nums2,nums1);
       int left = (m+n+1)/2;
       int low = 0 , high = m;
       while(low <= high)
       {
         int mid1 = (low+high)/2;
         int mid2 = left - mid1;
         int r1 = (mid1 < m) ? nums1[mid1] : Integer.MAX_VALUE;
         int r2 = (mid2 < n) ? nums2[mid2] : Integer.MAX_VALUE;
         int l1 = (mid1-1 >= 0) ? nums1[mid1-1] : Integer.MIN_VALUE;
         int l2 = (mid2-1 >= 0) ? nums2[mid2-1] : Integer.MIN_VALUE;

         if(l1 <= r2 && l2 <= r1)
          {
            if((m+n)%2 == 0)
            {
                return (double) (Math.max(l1,l2)+Math.min(r1,r2))/2.0;
            }
            else
                return (double) Math.max(l1,l2);
          }
          else if(l2 > r1 )
                  low = mid1+1;
          else 
               high = mid1 - 1;

       }
       return 0;
    }
}
