class Solution {
    
    private int firstOcc(int[] nums,int target)
    {
        int low = 0 , high = nums.length -1;
        int mid = (low + high) /2;
        while(low <= high)
        {
            if(nums[mid] > target)
             high = mid -1;
            else if(nums[mid] < target)
            { 
                low = mid +1;
            }
            else{
                if(mid==0 || nums[mid-1] != nums[mid] )
                 return mid;
                 else
                   high = mid -1;
            }
             mid = (low + high) /2;
        }
        return -1;
    }
    private int lastOcc(int[] nums,int target)
    {
        int low = 0 , high = nums.length -1;
        int mid = (low + high) /2;
        while(low <= high)
        {
            if(nums[mid] > target)
               high = mid -1;
            else if(nums[mid] < target) 
            {
               low = mid +1;
            }
            else{
                if(mid==nums.length-1 || nums[mid] != nums[mid+1] )
                 return mid;
                 else
                   low = mid +1;
            }
             mid = (low + high) /2;
        }
        return 0;
    }

    public int[] searchRange(int[] nums, int target) {
        int[] ans = new int[2];
        int first = firstOcc(nums,target);
        System.out.println(first);
        int last;
        if(first == -1)
          {  ans[0] = -1;
            ans[1] = -1;
            return ans;
          }
        else
            last = lastOcc(nums,target);

       ans[0] = first;
       ans[1] = last;
       return ans;
    }
}
